import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../components/thai_button.dart';
import '../components/thai_text_field.dart';
import '../core/theme/app_colors.dart';
import '../services/product_service.dart';
import '../services/user_service.dart';
import '../models/product.dart';
import '../models/user.dart';
import '../viewmodels/farmer_dashboard_viewmodel.dart';

class ProductUploadView extends StatefulWidget {
  const ProductUploadView({super.key});

  @override
  State<ProductUploadView> createState() => _ProductUploadViewState();
}

class _ProductUploadViewState extends State<ProductUploadView> {
  final _formKey = GlobalKey<FormState>();

  final _nameController = TextEditingController();
  final _priceController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _quantityController = TextEditingController();

  final ProductService _productService = ProductService();
  final UserService _userService = UserService();

  String _selectedCategory = 'vegetables';
  String _selectedQuantityUnit = 'pcs';
  bool _isLoading = false;
  String? _imageUrl;

  // Backend compatible categories
  final List<String> _categories = [
    'vegetables',
    'fruits',
    'rice',
    'herbs',
    'handmade',
    'dairy',
    'meat',
    'other',
  ];

  // Backend compatible category display names
  final Map<String, String> _categoryDisplayNames = {
    'vegetables': 'Vegetables',
    'fruits': 'Fruits',
    'rice': 'Rice',
    'herbs': 'Herbs',
    'handmade': 'Handmade',
    'dairy': 'Dairy',
    'meat': 'Meat',
    'other': 'Other',
  };

  // Quantity units
  final List<String> _quantityUnits = [
    'kg',
    'g',
    'pcs',
    'pack',
    'bag',
    'box',
    'bottle',
    'bunch',
    'dozen',
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _priceController.dispose();
    _descriptionController.dispose();
    _quantityController.dispose();
    super.dispose();
  }

  void _pickImage() {
    // For now, provide sample images based on category
    final sampleImages = {
      'vegetables':
          'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400',
      'fruits':
          'https://images.unsplash.com/photo-1557844352-761f2565b576?w=400',
      'rice':
          'https://images.unsplash.com/photo-1586201375761-83865001e31c?w=400',
      'herbs':
          'https://images.unsplash.com/photo-1530587191325-3db32d826c18?w=400',
      'handmade':
          'https://images.unsplash.com/photo-1505236732187-3d0d5c5e5daf?w=400',
      'dairy':
          'https://images.unsplash.com/photo-1550989460-0adf9ea622e2?w=400',
      'meat':
          'https://images.unsplash.com/photo-1603048297172-c92544798d5a?w=400',
      'other':
          'https://images.unsplash.com/photo-1601599561213-832382fd07ba?w=400',
    };

    setState(() {
      _imageUrl =
          sampleImages[_selectedCategory] ?? sampleImages['vegetables']!;
    });
  }

  Future<void> _handleSubmit() async {
    if (_formKey.currentState!.validate()) {
      if (_imageUrl == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please select a product image')),
        );
        return;
      }

      setState(() {
        _isLoading = true;
      });

      try {
        // Get current farmer ID from user service
        final currentUser = _userService.currentUser;
        if (currentUser == null ||
            _userService.currentUserRole != UserRole.farmer) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                'You must be logged in as a farmer to upload products',
              ),
            ),
          );
          setState(() {
            _isLoading = false;
          });
          return;
        }

        final farmerId = currentUser.id;
        print('Current farmer ID: $farmerId');
        print('Current user role: ${_userService.currentUserRole}');
        print('Auth token available: ${_userService.authToken != null}');
        print('User service logged in: ${_userService.isLoggedIn}');

        // Create product data for API
        final productData = {
          'title': _nameController.text,
          'description': _descriptionController.text,
          'price': double.parse(_priceController.text),
          'category': _selectedCategory,
          'quantity': int.parse(_quantityController.text),
          'unit': _selectedQuantityUnit,
          'image_url': _imageUrl,
        };

        print('Submitting product data: $productData');

        // Call API to create product
        final success = await _productService.addProduct(
          Product(
            id: '', // Will be generated by backend
            farmerId: farmerId, // Get from current logged-in farmer
            title: _nameController.text,
            description: _descriptionController.text,
            price: double.parse(_priceController.text),
            category: ProductCategory.values.firstWhere(
              (e) => e.toString().split('.').last == _selectedCategory,
            ),
            quantity: int.parse(_quantityController.text),
            unit: _selectedQuantityUnit,
            imageUrl: _imageUrl!,
            status: ProductStatus.available,
            createdDate: DateTime.now(),
            lastUpdated: DateTime.now(),
            orderCount: 0,
          ),
        );

        setState(() {
          _isLoading = false;
        });

        if (success) {
          // Show success message
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Product uploaded successfully! Quantity: ${_quantityController.text} $_selectedQuantityUnit',
              ),
              backgroundColor: AppColors.ricePaddyGreen,
            ),
          );

          // Clear form
          _nameController.clear();
          _priceController.clear();
          _descriptionController.clear();
          _quantityController.clear();
          setState(() {
            _imageUrl = null;
            _selectedCategory = 'vegetables';
            _selectedQuantityUnit = 'pcs';
          });

          // Notify the dashboard to refresh
          FarmerDashboardViewModel.notifyProductUploaded();

          // Navigate back to farmer dashboard
          // The dashboard will automatically refresh when this screen is popped
          context.pop();
        } else {
          // Show error message
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Failed to upload product. Please try again.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      } catch (e) {
        setState(() {
          _isLoading = false;
        });

        print('Error uploading product: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error uploading product: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Product'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Image Picker
              Center(
                child: GestureDetector(
                  onTap: _pickImage,
                  child: Container(
                    width: double.infinity,
                    height: 200,
                    decoration: BoxDecoration(
                      color: AppColors.bambooCream,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: AppColors.palmAshGray.withOpacity(0.3),
                      ),
                      image:
                          _imageUrl != null
                              ? DecorationImage(
                                image: NetworkImage(_imageUrl!),
                                fit: BoxFit.cover,
                              )
                              : null,
                    ),
                    child:
                        _imageUrl == null
                            ? Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Icon(
                                  Icons.add_photo_alternate_outlined,
                                  size: 48,
                                  color: AppColors.palmAshGray,
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  'Tap to add product image',
                                  style: theme.textTheme.bodyMedium?.copyWith(
                                    color: AppColors.palmAshGray,
                                  ),
                                ),
                              ],
                            )
                            : null,
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Product Name
              ThaiTextField(
                label: 'Product Name',
                hintText: 'Enter product name',
                controller: _nameController,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a product name';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Price
              ThaiTextField(
                label: 'Price (THB)',
                hintText: 'Enter price per unit',
                controller: _priceController,
                keyboardType: TextInputType.number,
                prefixIcon: Icons.currency_exchange,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a price';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Quantity with Unit
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.only(left: 4, bottom: 8),
                    child: Text(
                      'Quantity Available',
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                  Row(
                    children: [
                      // Quantity input field
                      Expanded(
                        flex: 3,
                        child: TextFormField(
                          controller: _quantityController,
                          keyboardType: TextInputType.number,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter quantity';
                            }
                            if (double.tryParse(value) == null) {
                              return 'Please enter a valid number';
                            }
                            return null;
                          },
                          decoration: InputDecoration(
                            hintText: 'Enter quantity',
                            prefixIcon: const Icon(
                              Icons.inventory_2_outlined,
                              color: AppColors.palmAshGray,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(16),
                              borderSide: BorderSide.none,
                            ),
                            filled: true,
                            fillColor: AppColors.bambooCream,
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 16,
                            ),
                            errorStyle: theme.textTheme.bodySmall?.copyWith(
                              color: AppColors.error,
                            ),
                          ),
                          style: theme.textTheme.bodyMedium,
                        ),
                      ),

                      const SizedBox(width: 12),

                      // Unit dropdown
                      Expanded(
                        flex: 2,
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          decoration: BoxDecoration(
                            color: AppColors.bambooCream,
                            borderRadius: BorderRadius.circular(16),
                            border: Border.all(
                              color: AppColors.palmAshGray.withOpacity(0.3),
                            ),
                          ),
                          child: DropdownButtonHideUnderline(
                            child: DropdownButton<String>(
                              value: _selectedQuantityUnit,
                              isExpanded: true,
                              icon: const Icon(Icons.arrow_drop_down),
                              elevation: 16,
                              style: theme.textTheme.bodyMedium,
                              onChanged: (String? value) {
                                if (value != null) {
                                  setState(() {
                                    _selectedQuantityUnit = value;
                                  });
                                }
                              },
                              items:
                                  _quantityUnits.map<DropdownMenuItem<String>>((
                                    String value,
                                  ) {
                                    return DropdownMenuItem<String>(
                                      value: value,
                                      child: Text(value),
                                    );
                                  }).toList(),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // Category Dropdown
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.only(left: 4, bottom: 8),
                    child: Text(
                      'Category',
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    decoration: BoxDecoration(
                      color: AppColors.bambooCream,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: AppColors.palmAshGray.withOpacity(0.3),
                      ),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: _selectedCategory,
                        isExpanded: true,
                        icon: const Icon(Icons.arrow_drop_down),
                        elevation: 16,
                        style: theme.textTheme.bodyMedium,
                        onChanged: (String? value) {
                          if (value != null) {
                            setState(() {
                              _selectedCategory = value;
                            });
                          }
                        },
                        items:
                            _categories.map<DropdownMenuItem<String>>((
                              String value,
                            ) {
                              return DropdownMenuItem<String>(
                                value: value,
                                child: Text(
                                  _categoryDisplayNames[value] ?? value,
                                ),
                              );
                            }).toList(),
                      ),
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // Description
              ThaiTextField(
                label: 'Description',
                hintText: 'Enter product description',
                controller: _descriptionController,
                maxLines: 4,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 32),

              // Submit Button
              ThaiButton(
                label: 'Upload Product',
                onPressed: _handleSubmit,
                variant: ThaiButtonVariant.secondary,
                icon: Icons.upload,
                isLoading: _isLoading,
                isFullWidth: true,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
